name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 5 * * *' # Runs every day at midnight EST (5 AM UTC)
  workflow_dispatch:
    inputs:
      president:
        description: 'President name (e.g., donald-trump, joe-biden)'
        required: false
        default: 'donald-trump'
        type: string
      year:
        description: 'Year to fetch executive orders for'
        required: false
        type: number
      skip_download:
        description: 'Skip download and only run pre-commit/tests'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --dev
        uv run pre-commit install

    - name: Run pre-commit on all files
      run: uv run pre-commit run --all-files

  test:
    needs: pre-commit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run tests
      run: uv run pytest tests/ --cov=executive_orders_pdf --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  download-and-merge:
    needs: [pre-commit, test]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'schedule') ||
      (github.event_name == 'workflow_dispatch' && !inputs.skip_download) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for accurate timestamps

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync

    - name: Set environment variables
      run: |
        # Use input year if provided, otherwise use current year
        if [ -n "${{ github.event.inputs.year }}" ]; then
          echo "YEAR=${{ github.event.inputs.year }}" >> $GITHUB_ENV
        else
          echo "YEAR=$(date +'%Y')" >> $GITHUB_ENV
        fi

        # Use input president if provided, otherwise use default (donald-trump)
        if [ -n "${{ github.event.inputs.president }}" ]; then
          echo "PRESIDENT=${{ github.event.inputs.president }}" >> $GITHUB_ENV
        else
          echo "PRESIDENT=donald-trump" >> $GITHUB_ENV
        fi

    - name: Cache downloaded PDFs
      uses: actions/cache@v4
      with:
        path: |
          downloaded_pdfs
          combined_pdfs
        key: ${{ runner.os }}-pdfs-${{ env.PRESIDENT }}-${{ env.YEAR }}-${{ hashFiles('executive_orders_pdf/**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-pdfs-${{ env.PRESIDENT }}-${{ env.YEAR }}-
          ${{ runner.os }}-pdfs-${{ env.PRESIDENT }}-
          ${{ runner.os }}-pdfs-

    - name: Run download and merge script
      run: |
        uv run executive-orders-pdf --president ${{ env.PRESIDENT }} --year ${{ env.YEAR }} --output combined_pdfs/${{ env.PRESIDENT }}_executive_orders_${{ env.YEAR }}.pdf || true

    - name: Generate PDF summary
      continue-on-error: true
      run: |
        if [ -d "combined_pdfs" ] && [ "$(ls -A combined_pdfs/*.pdf 2>/dev/null)" ]; then
          uv run pdf-summary --priority ${{ env.PRESIDENT }} || {
            echo "Warning: PDF summary generation failed, but continuing..."
            exit 0
          }
        else
          echo "No PDF files found in combined_pdfs directory"
          exit 0
        fi

    - name: Update README
      continue-on-error: true
      run: |
        if [ -f "pdf_summary.json" ]; then
          uv run update-readme --priority ${{ env.PRESIDENT }} || {
            echo "Warning: README update failed, but continuing..."
            exit 0
          }
        else
          echo "No pdf_summary.json found, skipping README update"
          exit 0
        fi

    - name: Run pre-commit on changed files
      run: |
        uv run pre-commit install
        # Only run on changed files to avoid unnecessary processing
        git add -A
        uv run pre-commit run || true  # Don't fail the workflow if pre-commit fixes files

    - name: Check for changes
      id: git_status
      run: |
        git add .
        if [ -z "$(git status --porcelain)" ]; then
          echo "No changes to commit"
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected"
          echo "changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.git_status.outputs.changes == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git commit -m "Automated update of executive orders for ${{ env.PRESIDENT }} - ${{ env.YEAR }}

        - Downloaded and merged PDFs
        - Updated PDF summary
        - Updated README
        - Applied pre-commit formatting"
        git push
