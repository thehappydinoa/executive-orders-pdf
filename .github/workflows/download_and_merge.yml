name: Download and Merge PDFs

on:
  schedule:
    - cron: '0 0 * * *' # Runs every day at midnight
  workflow_dispatch:
    inputs:
      president:
        description: 'President name (e.g., donald-trump, joe-biden)'
        required: false
        default: 'donald-trump'
        type: string
      year:
        description: 'Year to fetch executive orders for'
        required: false
        type: number

permissions:
  contents: write

jobs:
  download-and-merge:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set environment variables
      run: |
        # Use input year if provided, otherwise use current year
        if [ -n "${{ github.event.inputs.year }}" ]; then
          echo "YEAR=${{ github.event.inputs.year }}" >> $GITHUB_ENV
        else
          echo "YEAR=$(date +'%Y')" >> $GITHUB_ENV
        fi

        # Use input president if provided, otherwise use default (donald-trump)
        if [ -n "${{ github.event.inputs.president }}" ]; then
          echo "PRESIDENT=${{ github.event.inputs.president }}" >> $GITHUB_ENV
        else
          echo "PRESIDENT=donald-trump" >> $GITHUB_ENV
        fi

    - name: Cache downloaded PDFs
      uses: actions/cache@v4
      with:
        path: downloaded_pdfs
        key: ${{ runner.os }}-pdfs-${{ env.PRESIDENT }}-${{ env.YEAR }}
        restore-keys: |
          ${{ runner.os }}-pdfs-${{ env.PRESIDENT }}-
          ${{ runner.os }}-pdfs-

    - name: Run download and merge script
      run: |
        python cli.py --president ${{ env.PRESIDENT }} --year ${{ env.YEAR }} --output combined_pdfs/${{ env.PRESIDENT }}_executive_orders_${{ env.YEAR }}.pdf

    - name: Check for changes
      id: git_status
      run: |
        git add *.pdf
        if [ -z "$(git status --porcelain)" ]; then
          echo "No changes to commit"
          echo "changes=false" >> $GITHUB_ENV
        else
          echo "Changes detected"
          echo "changes=true" >> $GITHUB_ENV
        fi

    - name: Commit and push changes
      if: ${{ env.changes == 'true' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git commit -m "Automated update of executive orders for ${{ env.PRESIDENT }} - ${{ env.YEAR }}"
        git push
